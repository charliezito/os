#include <stdio.h>
#include <stdlib.h>

int main() {
    int queue[20], n, head, i, j, seek = 0, max, diff, temp, pos, queue1[20],queue2[20], r=j, l=0;
    printf("Enter the max range of disk: ");
    scanf("%d", &max);
    printf("Enter the initial head position: ");
    scanf("%d", &head);
    printf("Enter the size of queue request: ");
    scanf("%d", &n);
    
    printf("Enter the queue of disk positions to be read:\n");
    for (i = 0; i < n; i++) {
        int temp;
        scanf("%d", &temp);
        if (temp >= head) {
            queue1[temp] = temp;
            temp++;
        } else {
            queue2[temp] = temp;
            temp++;
        }
    }

    // Sort queue1
    for (i = 0; i < temp - 1; i++) {
        for (j = i + 1; j < temp; j++) {
            if (queue1[i] > queue1[j]) { 
                int temp = queue1[i];
                queue1[i] = queue1[j];
                queue1[j] = temp;
            }
        }
    }

    // Sort queue2
    for (i = 0; i < temp - 1; i++) {
        for (j = i + 1; j < temp; j++) {
            if (queue2[i] > queue2[j]) { 
                int temp = queue2[i];
                queue2[i] = queue2[j];
                queue2[j] = temp;
            }
        }
    }

    // Merge queues
    int index = 0;
    for (i = 0; i < temp; i++) {
        queue[index++] = queue1[i];
    }
    
    // Add max to represent end of disk
    queue[index++] = max;

    for (i = 0; i < temp; i++) {
        queue[index++] = queue2[i];
    }

    // Set head position at start
    queue[0] = head;

    // Calculate seek time
    for (j = 0; j < index - 1; j++) {
        diff = abs(queue[j + 1] - queue[j]);
        seek += diff;
        printf("Disk head moves from %d to %d with seek %d\n", queue[j], queue[j + 1], diff);
    }

    printf("Total seek time is %d\n", seek);
    
    return 0;
}
